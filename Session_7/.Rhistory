R21_Outcome_Severity <- Immune_Patient_Merged %>% select(IDSA_severe.y,DEATH_30_YN.y,COLECTOMY_30_YN, ICU_ADMIT_30_YN, recurrence_status_recur,by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
R21_Outcome_Table_Severity <- tbl_summary(R21_Outcome_Severity,missing = "ifany")
R21_Outcome_Severity <- Immune_Patient_Merged %>% select(IDSA_severe.y,DEATH_30_YN.y,COLECTOMY_30_YN, ICU_ADMIT_30_YN, recurrence_status_recur)
R21_Outcome_Table_Severity <- tbl_summary(R21_Outcome_Severity,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
R21_Outcome_Table_Severity
#Outcomes
R21_Outcome_Severity <- Immune_Patient_Merged %>% select(IDSA_severe.y,DEATH_30_YN.y,COLECTOMY_30_YN, ICU_ADMIT_30_YN, recurrence_status_recur)
R21_Outcome_Table_Severity <- tbl_summary(R21_Outcome_Severity,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#Patient Demogarphics
R21_Demogaphics <- Immune_Patient_Merged %>% select(AGE_AT_CDIFF,GENDER,ETHNICITY,IDSA_severe.y)
R21_Demo_Table <- tbl_summary(R21_Demogaphics,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#Cardiographics
R21_Card <- Immune_Patient_Merged %>% select(CHF, CARD_ARRHYTH, VALV_DZ,PULM_CIRC,PVD,HT_UNCOMP,HT_COMP,COAGULOPATHY,BLOOD_LOSS_ANEMIA,DEFICIENCY_ANEMIA,IDSA_severe.y)
R21_Card_Table <- tbl_summary(R21_Card,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#CDI
R21_CDI <- Immune_Patient_Merged %>% select(pos_ileus_overall,pos_megacolon,CDIFF_POS_PRE_NM,CDIFF_POS_POST_NM,PRIORCDI,UNATTRIB_SEVERECDI,NUM_TOXIN_TEST,NUM_PCR_TEST,FACTOR_TOXIN_TEST,FACTOR_PCR_TEST,IDSA_severe.y)
R21_CDI_Table <- tbl_summary(R21_CDI,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#Psych
R21_Psych <- Immune_Patient_Merged %>% select(ALCOHOL_ABUSE,DRUG_ABUSE,PSYCHOSES,DEPRESSION,IDSA_severe.y)
R21_Psych_Table <- tbl_summary(R21_Psych,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#Vent
R21_Vent <- Immune_Patient_Merged %>% select(VENT_STATUS_YN,PULM,IDSA_severe.y)
R21_Vent_Table <- tbl_summary(R21_Vent,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#Drug
R21_Drug <- Immune_Patient_Merged %>% select(nsaid,non_aspirin_nsaid,ppi,IDSA_severe.y)
R21_Drug_Table <- tbl_summary(R21_Drug,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#GU
R21_GI<- Immune_Patient_Merged %>% select(LIVER_DZ_ENC_NM,MULTI_LIVER_PER_YR_YN,IBD,AKI,PUD,IDSA_severe.y)
R21_GI_Table <- tbl_summary(R21_GI,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#Immune
R21_Immune<- Immune_Patient_Merged %>% select(back_pain,osteoarthritis,anticoagulants,antiplatelets,AIDS,LYMPHOMA,METS,SOLID_TUMOR,RHEUMATOID,IDSA_severe.y)
R21_Immune_Table <- tbl_summary(R21_Immune,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#Mets
R21_Mets<- Immune_Patient_Merged %>% select(DM_UNCOMP,DM_COMP,HYPOTHYROID,RENAL_DZ,LIVER_DZ,FLUID_LYTES,OBESITY,WEIGHT_LOSS,IDSA_severe.y)
R21_Mets_Table <- tbl_summary(R21_Mets,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#Vitals
R21_Vitals<- Immune_Patient_Merged %>% select(VITAL_TEMP_MAX,VITAL_SYST_BP_LOW,VITAL_MAP_LOW,VITAL_RESP_RATE_MAX,FEVER,IDSA_severe.y)
R21_Vitals_Table <- tbl_summary(R21_Vitals,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#Immune Serum
R21_Serum<- Immune_Patient_Merged %>% select(logPC1,logPC2,log_TNFa,log_IL.6,log_IL.8,log_MCP.1,log_MIP.1b,log_Procalcitonin,log_IL.4,log_CXCL.9,log_CXCL.5,log_HGF,log_IP.10,log_EGF,log_IL.22,log_IL.2Ra,log_IL.15,log_IL.23_new,log_RANTES_new,IDSA_severe.y)
R21_Serum_Table <- tbl_summary(R21_Serum,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#Immune Stool
R21_Stool<- Immune_Patient_Merged %>% select(stool_CCL2.MCP.1,stool_CXCL5.ENA.78,stool_CXCL10.IP.10,stool_IL.6,stool_IL.23,stool_CXCL8.IL.8,stool_CD25.IL.2.R.alpha,stool_IL.22,stool_EGF,stool_CCL4.MIP.1,stool_TNF.alpha,stool_IL.15,stool_HGF,stool_Procalcitonin,stool_IL.4,stool_CCL5.RANTES,toxin_stool,IDSA_severe.y)
R21_Stool_Table <- tbl_summary(R21_Stool,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
#Merged
tbls <- list(R21_Outcome_Table_Severity,R21_CDI_Table,R21_Demo_Table,R21_Drug_Table,R21_GI_Table,R21_Mets_Table,R21_Vent_Table,R21_Card_Table,R21_Immune_Table,R21_Serum_Table,R21_Stool_Table)
table<-tbl_stack(tbls, group_header = c("Outcomes","CDI-Related Measures","Demographics","Drug","GI","Mets","Pulm","Cardiology","Immune","Serum","Stool"))
table
R21_Immune<- Immune_Patient_Merged %>% select(back_pain,osteoarthritis,anticoagulants,antiplatelets,AIDS,LYMPHOMA,METS,SOLID_TUMOR,RHEUMATOID,IDSA_severe.y)
R21_Immune_Table <- tbl_summary(R21_Immune,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
tbls <- list(R21_Outcome_Table_Severity,R21_CDI_Table,R21_Demo_Table,R21_Drug_Table,R21_GI_Table,R21_Mets_Table,R21_Vent_Table,R21_Card_Table,R21_Immune_Table,R21_Serum_Table,R21_Stool_Table)
table<-tbl_stack(tbls, group_header = c("Outcomes","CDI-Related Measures","Demographics","Drug","GI","Mets","Pulm","Cardiology","Immune","Serum","Stool"))
table
R21_Immune_Table
R21_Immune<- Immune_Patient_Merged %>% select(back_pain,osteoarthritis,anticoagulants,antiplatelets,AIDS,LYMPHOMA,METS,SOLID_TUMOR,RHEUMATOID,IDSA_severe.y)
R21_Immune_Table <- tbl_summary(R21_Immune,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
R21_Immune_Table
R21_Immune<- Immune_Patient_Merged %>% select(back_pain,osteoarthritis,anticoagulants,antiplatelets,LYMPHOMA,METS,SOLID_TUMOR,RHEUMATOID,IDSA_severe.y)
R21_Immune_Table <- tbl_summary(R21_Immune,missing = "ifany",by = IDSA_severe.y)  %>%  bold_labels() %>% add_p()
R21_Immune_Table
table<-tbl_stack(tbls, group_header = c("Outcomes","CDI-Related Measures","Demographics","Drug","GI","Mets","Pulm","Cardiology","Immune","Serum","Stool"))
table
tbls <- list(R21_Outcome_Table_Severity,R21_CDI_Table,R21_Demo_Table,R21_Drug_Table,R21_GI_Table,R21_Mets_Table,R21_Vent_Table,R21_Card_Table,R21_Immune_Table,R21_Serum_Table,R21_Stool_Table)
table<-tbl_stack(tbls, group_header = c("Outcomes","CDI-Related Measures","Demographics","Drug","GI","Mets","Pulm","Cardiology","Immune","Serum","Stool"))
table
Immune_Patient_Merged$care_level
version()
R -version
-version
version
version
install.packages("tidyr")
install.packages("ggplot2")
install.packages("pheatmap")
install.packages("ggrepel")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("pheatmap")
install.packages("ggrepel")
install.packages("formattable")
install.packages("RColorBrewer")
install.packages("matrixStats")
install.packages("dplyr")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("biomaRt","DESeq2"), update=FALSE, ask=FALSE)
missing <- setdiff(c("tidyr", "ggplot2", "pheatmap", "ggrepel", "formattable", "RColorBrewer", "matrixStats", "dplyr", "biomaRt", "DESeq2"), rownames(installed.packages()))
if (!length(missing)) { cat("Ready for Computational Foundations workshop\n")} else {cat("PROBLEM: could not install:", missing, "\n")}
data("iris")
str(iris)
View(iris)
l
plot(iris)
?plot
plot(iris,col="pink")
library(ggplot2)
?qplot
help(qplot)
# Visualize the Relationships Between Sepal Length and Sepal Width in the Iris Dataset
qplot(data = iris,
x = Sepal.Width,
y = Sepal.Length)
qplot(data = iris,
x = Sepal.Width,
y = Sepal.Length,col=as.factor(iris$Species))
qplot(data = iris,
x = Sepal.Width,
y = Sepal.Length,col=as.factor(Species))
qplot(data = iris,
x = Sepal.Width,
y = Sepal.Length,
col=as.factor(Species),
size=Petal.Length)
gplot(data=iris)
qplot(data=iris)
data("airquality")
covid_table_10 <- covid_table_10[complete.cases(covid_table_10),]
# Now let's make everything 3D!
# Remember to 'transform' your variables to make things easier to visualize
# Change your axis titles to indicate you've transformed your variables
plot_ly(covid_table_10, x = ~deaths, y = ~cases, z = ~deaths_million, color = ~country)  %>%
layout(title = "Reported Cases vs Deaths vs Deaths/Million by Country",
scene = list(title = "Reported Deaths"),
yaxis = list(title = "Reported Cases"),
zaxis = list(title = "Deaths/Million")) %>%
layout(
images = list(
list(
# Add images directly from a website
source =  "https://images.plot.ly/language-icons/api-home/r-logo.png?raw=true",
# Adding '?raw=true' at the end of the link ensures that only the photo is taken from a website
xref = "x",
yref = "y",
x = 0.2,  # changes the x-axis location of the image
y = 3,    # changes the y-axis location of the image
sizex = 2,
sizey = 2,
sizing = "stretch",
opacity = 0.4,
layer = "below"
)
)
) %>%
hide_legend()
data("airquality")
qplot(data=airquality,x=ozone,y=temp)
airquality
qplot(data=airquality,x=Ozone,y=Temp)
qplot(data=airquality,x=Temp,y=Ozone)
?str
str(iris)
summary(iris)
plot(iris)
plot(iris,col="pink")
plot(iris,col=Species)
plot(iris,col=species)
plot(iris,col=Species)
plot(iris, col= Species)
plot(iris, col= iris$Species)
qplot(data = iris,
x = Sepal.Width,
y = Sepal.Length)
x = Sepal.Width,
# Use the size argument to add Petal Length to the plot
qplot(data = iris,
x = Sepal.Width,
y = Sepal.Length,
col=Species,
size=Petal.Length)
color=Species,
qplot(data = iris,
x = Sepal.Width,
y = Sepal.Length,
color=Species,
size=Petal.Length)
qplot(data = iris,
x = Sepal.Width,
y = Sepal.Length,
col=Species,
size=Petal.Length)
?qplot
size=Petal.Length,stat=TRUE)
# Use the size argument to add Petal Length to the plot
qplot(data = iris,
x = Sepal.Width,
y = Sepal.Length,
col=Species,
size=Petal.Length,stat=TRUE)
size=Petal.Length,shape = Species)
qplot(data = iris,
x = Sepal.Width,
y = Sepal.Length,
col=Species,
size=Petal.Length,shape = Species)
data("airquality")
qplot(data=airquality,x=Temp,y=Ozone)
qplot(data=airquality,x=Temp,y=Ozone,shape=Wind,)
qplot(data=airquality,x=Temp,y=Ozone,shape=Wind)
qplot(data=airquality,x=Temp,y=Ozone,shape=as.factor(Wind))
airquality$Wind
qplot(data=airquality,x=Temp,y=Ozone,color=as.factor(Wind),size=Solar.R,shape=as.factor(Month))
qplot(data=airquality,x=Temp,y=Ozone,color=Wind,size=Solar.R,shape=as.factor(Month))
qplot(data=airquality,x=Ozone,y= Temp ,color=Wind,size=Solar.R,shape=as.factor(Month))
qplot(data=airquality,x=Ozone,y= Temp ,color=Wind,size=Solar.R,shape=as.factor(Month),title="Test")
qplot(data=airquality,x=Ozone,y= Temp ,color=Wind,size=Solar.R,shape=as.factor(Month),main="Test")
qplot(data=airquality,x=Ozone,y= Temp ,color=Wind,size=Solar.R,shape=as.factor(Month),main="Test",xlab="test")
qplot(data=airquality,x=Ozone,y= Temp ,color=Wind,size=Solar.R,shape=as.factor(Month),main="Test",xlab="ugly label")
ggplot(data = iris, aes(x = Petal.Length)) +
geom_density(fill = "Pink")
?ggplot
ggplot(data = iris, aes(x = Petal.Length,group=Species)) +
geom_density(fill = "Pink")
geom_density(aes(fill = "Pink"))
ggplot(data = iris, aes(x = Petal.Length,group=Species)) +
geom_density(aes(fill = "Pink"))
geom_density(aes(fill = Species))
geom_density(aes(fill = iris$Species))
ggplot(data = iris, aes(x = Petal.Length,group=Species)) +
geom_density(aes(fill = iris$Species))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
facet_wrap(~class, scales = "free")
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
facet_wrap(~class)
ggplot(data = iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species), alpha = 0.5) +
facet_wrap(~Species, scales = "free")
ggplot(data = warpbreaks, aes(x = wool, y = breaks)) +
geom_boxplot() +
geom_point() +
stat_summary(geom = "point", fun = "mean", color = "blue", size = 3, alpha = 0.5) +
labs(caption = "Data Source: warpbreaks in R",
title = "Knitting Breaks By Types of Wool")
stat_summary(geom = "point", fun = "sd", color = "blue", size = 3, alpha = 0.5) +
ggplot(data = warpbreaks, aes(x = wool, y = breaks)) +
geom_boxplot() +
geom_point() +
stat_summary(geom = "point", fun = "sd", color = "blue", size = 3, alpha = 0.5) +
labs(caption = "Data Source: warpbreaks in R",
title = "Knitting Breaks By Types of Wool")
ggplot(data = warpbreaks, aes(x = wool, y = breaks)) +
geom_boxplot() +
geom_point() +
stat_summary(geom = "point", fun = "sd", color = "blue", size = 3, alpha = 0.5) +
labs(caption = "Data Source: warpbreaks in R",
title = "Knitting Breaks By Types of Wool")
website <- read_html("https://en.wikipedia.org/wiki/COVID-19_pandemic_by_country_and_territory")
install.packages('rvest')
library(rvest)
# Get data from Wikipedia
website <- read_html("https://en.wikipedia.org/wiki/COVID-19_pandemic_by_country_and_territory")
View(website)
library('dplyr')
covid_tables <- website %>% html_table() # retrieves all of the tables from the webpage
covid_table_10 <- covid_tables[[10]]     # retrieves the 10th table from the webpage
View(covid_table_10)
head(covid_table_10)
head[,c(2:5)]
head[c(2:5)]
covid_table_10[c(2:5)]
covid_table_10[,c(2:5)]
covid_table_10[,c(2:5)]
covid_table_10[c(2:5)]
covid_table_10 %>% subset()
covid_table_10 %>% subset(2:5)
covid_table_10 %>% subset(colnames(covid_table_10[2:5]))
covid_table_10 %>% select(colnames(covid_table_10[2:5]))
covid_table_10[c(2:5)]
covidcols <-
covid_table_10[c(2:5)]
as.numeric(covid_table_10$Deaths)
install.packages("janitor")
library(janitor)
covid_table_10[,c(2:4)] <- apply(X=covid_table_10[-,c(1)],MARGIN=2,FUN=parse_number)
# Let's 'clean' the data table column names
covid_table_10[,c(2:4)] <- apply(X=covid_table_10[,-c(1)],MARGIN=2,FUN=parse_number)
install.packages("janitor")
install.packages("janitor")
covid_table_10[,c(2:4)] <- apply(X=covid_table_10[,-c(1)],MARGIN=2,FUN=parse_number)
librarY(janitor)
library(janitor)
covid_table_10[,c(2:4)] <- apply(X=covid_table_10[,-c(1)],MARGIN=2,FUN=parse_number)
plotly::plot_ly(x = covid_table_10$cases, y = covid_table_10$deaths, type = "scatter", mode = 'markers', color = covid_table_10$country)  %>%
layout(title = "Reported Cases vs Deaths by Country",
xaxis=list(title = "Reported Cases"),
yaxis = list(title = "Reported Deaths"),
#legend = list(orientation = 'h'),
plot_bgcolor = "Black",
paper_bgcolor = 'Black',
font = list(color = "White")
) %>%
hide_legend()
??parse_number
library(readr)
covid_table_10[,c(2:4)]  <- apply(X = covid_table_10[, -c(1)], MARGIN = 2, FUN = parse_number)
covid_table_10[,c(2:4)]  <- apply(X = covid_table_10[, -c(1)], MARGIN = 2, FUN = Parse_number)
covid_table_10[,c(2:4)]
covid_table_10[, -c(1)]
covid_table_10[,c(2:4)]  <- apply(X = covid_table_10[, -c(1)], MARGIN = 2, FUN = parse_number)
covid_table_10[,c(2:4)]  <- apply(X = covid_table_10[, -c(1)], MARGIN = 2, FUN = parse_number)
prase_number(covid_table_10[,c(2:4)])
parse_number(covid_table_10[,c(2:4)])
covid_table_10[,c(2:4)] <- apply(X=covid_table_10[,-c(1)],MARGIN=2,FUN=parse_number)
covidcols <-
covid_table_10[c(2:5)]
install.packages("janitor")
covid_table_10 %>% select(colnames(covid_table_10[2:5]))
covid_table_10[,c(2:4)] <- apply(X=covid_table_10[,-c(1)],MARGIN=2,FUN=parse_number)
covid_table_10[,c(2:4)] <- apply(X=covidcols,MARGIN=2,FUN=parse_number)
covid_table_10 <- covid_table_10 %>% clean_names()
covid_table_10
setwd("~/Desktop/code_club_curriculum/Session_7/")
# Load .treefile using the ape package ()
tree <- read.tree(file="./2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.treefile")
# Cran packages
cran_packages <- c("BiocManager","phytools","ggplot2","tidyverse","readxl","randomcoloR","cowplot")
# BiocManager packages
BiocManager_packages <- c("ggtree","ggnewscale")
# Functions to install packages (if not installed already)
# lapply(cran_packages,install.packages,character.only=T)
# lapply(BiocManager_packages,BiocManager::install,character.only=T)
# Functions to load packages
lapply(cran_packages,library,character.only=T)
lapply(BiocManager_packages,library,character.only=T)
```
## Part 1: Load the .treefile Into the R Environment
```{r}
# Note: If you choose to work in the console and not knit your .Rmd, consider setting your working directory
setwd("~/Desktop/code_club_curriculum/Session_7/")
# Cran packages
cran_packages <- c("BiocManager","phytools","ggplot2","tidyverse","readxl","randomcoloR","cowplot")
# BiocManager packages
BiocManager_packages <- c("ggtree","ggnewscale")
# Functions to install packages (if not installed already)
# lapply(cran_packages,install.packages,character.only=T)
# lapply(BiocManager_packages,BiocManager::install,character.only=T)
# Functions to load packages
lapply(cran_packages,library,character.only=T)
lapply(BiocManager_packages,library,character.only=T)
```
## Part 1: Load the .treefile Into the R Environment
```{r}
# Note: If you choose to work in the console and not knit your .Rmd, consider setting your working directory
setwd("~/Desktop/code_club_curriculum/Session_7/")
# Load .treefile using the ape package ()
tree <- read.tree(file="./2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.treefile")
# Question: What type of object is the .treefile?
class(tree)
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
knitr::opts_chunk$set(fig.width = 15, fig.height = 10)
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(root.dir="~/Desktop/code_club_curriculum/Session_7/")
```
## Agenda
0. Set up the R Environment
1. Load the .treefile Into the R Environment
2. Perform Initial Visualization of the Phylogeny Using the ggtree Package
3. Clean the Phylogeny by Removing Tips and Midpoint Rooting
4. Explore Whether Subseting Tree Based on Sequence Type of Interest is Valuable
5. Subset Tree Based on Sequence Type
6. Visualize Colistin Resistance Using Gheatmap
7. Using ggnewscale to plot heatmap with variables that have different data structures
## Part 0: Set up the R Environment
Note: This code chunk loads the required packages for this code club session. Instead of using the library function consecutively for each package, I often use this lapply function strategy to load my packages at the start of my R markdown file.
```{r}
# Packages used
# Cran packages
cran_packages <- c("BiocManager","phytools","ggplot2","tidyverse","readxl","randomcoloR","cowplot")
# BiocManager packages
BiocManager_packages <- c("ggtree","ggnewscale")
# Functions to install packages (if not installed already)
# lapply(cran_packages,install.packages,character.only=T)
# lapply(BiocManager_packages,BiocManager::install,character.only=T)
# Functions to load packages
lapply(cran_packages,library,character.only=T)
lapply(BiocManager_packages,library,character.only=T)
setwd("~/Desktop/code_club_curriculum/Session_7/")
# Load .treefile using the ape package ()
tree <- read.tree(file="./2021_02_12_08_34_28_KPNIH1_genome_aln_w_alt_allele_unmapped.treefile")
class(tree)
vignette("ggtree")
# Visualize tree object using the ggtree function
# Help page documentation for ggtree function
help(ggtree)
# Use the ggtree function to view phylogeny
ggtree(tree)
# Help page documentation for ggtree function
help(ggtree)
# Use the ggtree function to view phylogeny
ggtree(tree)
ggtree(tree) + geom_treescale(x=0,y=-10,offset=.1) + ggtitle("Initial Phylogeny")
require(knitr)
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
knitr::opts_chunk$set(fig.width = 15, fig.height = 10)
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(root.dir="~/Desktop/code_club_curriculum/Session_7/")
ggtree(tree) + geom_treescale(x=0,y=-10,offset=.5) + ggtitle("Initial Phylogeny")
ggtree(tree) + geom_treescale(x=0,y=-10,offset=.5) + ggtitle("Initial Phylogeny")
ggtree(tree) + geom_treescale(x=0,y=-10,offset=1) + ggtitle("Initial Phylogeny")
# Exercise: Identify the location of the tip labels for this tree
head(tree$tip.label)
# Drop Reference group using the treeio package's drop.tip function
tree_wo_root <- treeio::drop.tip(tree,'gi_661922017_gb_CP008827.1_')
# View tree without reference group
ggtree(tree_wo_root)  + ggtitle("Tree Without the Reference Group")
# Question: Would midpoint rooting be valuable for this phylogeny?
#Answer: Midpoint root a phylogeny involves locating the longest path between any two tips and putting the root at that location
# Midpoint root using phytools rooting tool
tree_final <- phytools::midpoint.root(tree_wo_root)
# View midpoint rooted tree again
ggtree(tree_final)  + ggtitle("Midpoint Rooted Tree")
# Question: What is the difference in the tree_wo_root and tree_final?
# Plot the ggtree images side-by-side using the cowplot package's plot_grid function
plot_grid(ggtree(tree_wo_root), ggtree(tree_final), ncol=2,labels = c('Without Rooting','Midpoint Root'))
# Import CRKP Metadata
CRKP_metadata <- as.data.frame(read_xlsx('./CRKP_metadata.xlsx'))
# Exercise: Characterize the dataset
#1. What are the variables in this dataframe?
names(CRKP_metadata)
nrow(CRKP_metadata)
nrow(CRKP_metadata) == tree$Nnode
rownames(CRKP_metadata)
head(tree_final$tip.label)
rownames(CRKP_metadata) <- paste0("PCMP_H",CRKP_metadata$isolate_no)
CRKP_metadata_final <- as.data.frame(CRKP_metadata[match(as.vector(tree_final$tip.label), row.names(CRKP_metadata)), ])
table(CRKP_metadata_final$ST)
hist(as.factor(CRKP_metadata_final$ST))
ggplot(data = CRKP_metadata_final, aes(x = ST)) +
geom_bar()
ST_tip <- c(CRKP_metadata_final$ST,rep(NA,tree_final$Nnode))
#Visualize tree with sequence type as tips
ggtree(tree_final) +  geom_tippoint(aes(color=ST_tip,legend_title="Sequence Types"))
# Subset the tree to include only ST258 isolates
# Create ST258 dataframe
CRKP_258 <- subset(CRKP_metadata_final,ST == "258")
# Subset phylogeny to include only ST258 isolates
tree_258 <- drop.tip(tree_final,tree_final$tip.label[!tree_final$tip.label %in% rownames(CRKP_258)])
# Sort dataframe by tip label
CRKP_258_sorted <- CRKP_258[match(tree_258$tip.label, rownames(CRKP_258)), ]
ggtree(tree_258)
table(CRKP_258_sorted$Source)
Source_tip <- c(CRKP_258_sorted$Source,rep(NA,tree_258$Nnode))
# 3. Visualize
ggtree(tree_258) +  geom_tippoint(aes(color=Source_tip),size=2) + labs(color="Source")
tree_258_source <- ggtree(tree_258) +  geom_tippoint(aes(color=Source_tip),size=2) + labs(color="Source")
table(CRKP_258_sorted$Colistin)
275+136
275/136
275/411
Colistin <- c(CRKP_258_sorted$Colistin,rep(NA,tree_258$Nnode))
# 3. Visualize and improve size
ggtree(tree_258) +  geom_tippoint(aes(color=Colistin,legend_title="Colistin Resistance"),size=3)
ggtree(tree_258) +  geom_tippoint(aes(color=Source_tip,shape=Colistin,legend_title="Region"),size=3)+ labs(color="Source")
ggtree(tree_258) +  geom_tippoint(aes(color=Colistin,legend_title="Colistin Resistance"),size=2)
# Exercise 3: Create a phylogeny with geom_tippoint (1) color = source and (2) shape = colistin resistance
ggtree(tree_258) +  geom_tippoint(aes(color=Source_tip,shape=Colistin,legend_title="Region"),size=2)+ labs(color="Source")
help(gheatmap)
# Initial gheatmap of Colistin Resistance
gheatmap(ggtree(tree_258),CRKP_258_sorted %>% select(Colistin))+ ylim(NA, 450)
gheatmap(ggtree(tree_258), CRKP_258_sorted %>% select(Colistin), colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=5) + ylim(NA, 450)
gheatmap(ggtree(tree_258), CRKP_258_sorted %>% select(Colistin), colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=5) + scale_fill_manual(values=c("black","white"),name="Resistance Profile") + ylim(NA, 450)
gheatmap(ggtree(tree_258), CRKP_258_sorted %>% select(Colistin), colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=5) + scale_fill_manual(values=c("black","white"),name="Resistance Profile") + theme(legend.position ='bottom',legend.key = element_rect(colour=c('black')), legend.direction="horizontal",legend.title = element_text(size=14),legend.text = element_text(size=8)) + ylim(NA, 450)
gheatmap(ggtree(tree_258), CRKP_258_sorted %>% select(Colistin), colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=5) + scale_fill_manual(values=c("black","white"),name="Resistance Profile") + theme(legend.position ='bottom',legend.key = element_rect(colour=c('black')), legend.direction="horizontal",legend.title = element_text(size=14),legend.text = element_text(size=8)) + ylim(NA, 455)
gheatmap(ggtree(tree_258), CRKP_258_sorted %>% select(Colistin), colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=5) + scale_fill_manual(values=c("black","white"),name="Resistance Profile") + theme(legend.position ='bottom',legend.key = element_rect(colour=c('black')), legend.direction="horizontal",legend.title = element_text(size=14),legend.text = element_text(size=8)) + ylim(NA, 475)
gheatmap(tree_258_source, CRKP_258_sorted %>% select(Colistin), colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=5) + scale_fill_manual(values=c("black","white"),name="Resistance Profile") + theme(legend.position ='bottom',legend.key = element_rect(colour=c('black')), legend.direction="horizontal",legend.ti
gheatmap(tree_258_source, CRKP_258_sorted %>% select(Colistin), colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=5) + scale_fill_manual(values=c("black","white"),name="Resistance Profile") + theme(legend.position ='bottom',legend.key = element_rect(colour=c('black')), legend.direction="horizontal",legend.title = element_text(size=14),legend.text = element_text(size=8)) + ylim(NA,475) tle = element_text(size=14),legend.text = element_text(size=8)) + ylim(475)
gheatmap(tree_258_source, CRKP_258_sorted %>% select(Colistin), colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=5) + scale_fill_manual(values=c("black","white"),name="Resistance Profile") + theme(legend.position ='bottom',legend.key = element_rect(colour=c('black')), legend.direction="horizontal",legend.title = element_text(size=14),legend.text = element_text(size=8)) + ylim(NA,475)
help("ggnewscale")
help("new_scale_fill")
help("distinctColorPalette")
palette_source <- distinctColorPalette(4)
pie(rep(1,length(palette_source)),col=palette_source)
random
p1 <- gheatmap(ggtree(tree_258),CRKP_258_sorted %>% select(Source),colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=6) + scale_fill_manual(values=palette_source,name="Source") + ylim(NA,450)
print(p1)
#Use new_scale_fill to add optionc
p2 <- p1 + new_scale_fill()
#Add Resistance Column to Heatmap
p3 <- gheatmap(p2, CRKP_258_sorted %>% select(Colistin), colnames_position="top",  colnames_angle=90, colnames_offset_y=0.25, width=.05, hjust=0, font.size=6, offset=.0000018)  + theme(legend.position ='bottom',legend.key = element_rect(colour=c('black')), legend.direction="horizontal",legend.title = element_text(size=14),legend.text = element_text(size=8))+ geom_treescale(x=0,y=-10,offset=1)   + scale_fill_manual(values=c("black","white"),name="Resistance Profile") + ylim(NA, 450)
print(p3)
p1 <- gheatmap(ggtree(tree_258),CRKP_258_sorted %>% select(Source),colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=6) + scale_fill_manual(values=palette_source,name="Source") + ylim(NA,475)
print(p1)
#Use new_scale_fill to add optionc
p2 <- p1 + new_scale_fill()
#Add Resistance Column to Heatmap
p3 <- gheatmap(p2, CRKP_258_sorted %>% select(Colistin), colnames_position="top",  colnames_angle=90, colnames_offset_y=0.25, width=.05, hjust=0, font.size=6, offset=.0000018)  + theme(legend.position ='bottom',legend.key = element_rect(colour=c('black')), legend.direction="horizontal",legend.title = element_text(size=14),legend.text = element_text(size=8))+ geom_treescale(x=0,y=-10,offset=1)   + scale_fill_manual(values=c("black","white"),name="Resistance Profile") + ylim(NA, 475)
print(p3)
p1 <- gheatmap(ggtree(tree_258),CRKP_258_sorted %>% select(Source),colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=6) + scale_fill_manual(values=palette_source,name="Source") + ylim(NA,500)
print(p1)
#Use new_scale_fill to add optionc
p2 <- p1 + new_scale_fill()
#Add Resistance Column to Heatmap
p3 <- gheatmap(p2, CRKP_258_sorted %>% select(Colistin), colnames_position="top",  colnames_angle=90, colnames_offset_y=0.25, width=.05, hjust=0, font.size=6, offset=.0000018)  + theme(legend.position ='bottom',legend.key = element_rect(colour=c('black')), legend.direction="horizontal",legend.title = element_text(size=14),legend.text = element_text(size=8))+ geom_treescale(x=0,y=-10,offset=1)   + scale_fill_manual(values=c("black","white"),name="Resistance Profile") + ylim(NA, 500)
print(p3)
p1 <- gheatmap(ggtree(tree_258),CRKP_258_sorted %>% select(Source),colnames_position="top", colnames_angle=90, colnames_offset_y=0.25, width=.05,hjust=0,font.size=6) + scale_fill_manual(values=palette_source,name="Source") + ylim(NA,500)
print(p1)
#Use new_scale_fill to add optionc
p2 <- p1 + new_scale_fill()
#Add Resistance Column to Heatmap
p3 <- gheatmap(p2, CRKP_258_sorted %>% select(Colistin), colnames_position="top",  colnames_angle=90, colnames_offset_y=0.25, width=.05, hjust=0, font.size=6, offset=.0000018)  + theme(legend.position ='bottom',legend.key = element_rect(colour=c('black')), legend.direction="horizontal",legend.title = element_text(size=14),legend.text = element_text(size=8))+ geom_treescale(x=0,y=-15,offset=1)   + scale_fill_manual(values=c("black","white"),name="Resistance Profile") + ylim(NA, 500)
print(p3)
?ggtree
?ggtree
?ggnewscale
?new_scale_fill
?distinctColorPalette
?ggtree
ggtree(tree_258,layout = "radial")
ggtree(tree_258,layout = "ape")
ggtree(tree_258,layout = "dendogram")
ggtree(tree_258,layout = "dendrogram")
